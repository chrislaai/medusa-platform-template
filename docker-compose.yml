version: "3.8"

services:
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - 9000:9000
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.backend.rule=Host(`${BACKEND_DOMAIN}`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.service=backend
      - traefik.http.routers.backend.tls=true
      - traefik.http.services.backend.loadbalancer.server.port=9000
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ADMIN_CORS=${ADMIN_CORS}
      - STORE_CORS=${STORE_CORS}
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
      - MEDUSA_FF_PRODUCT_CATEGORIES=true
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_PRIVATE_BUCKET=${MINIO_PRIVATE_BUCKET}
      - MEILISEARCH_HOST=${MEILISEARCH_HOST}
      - MEILISEARCH_API_KEY=${MEILISEARCH_API_KEY}
      - PAYPAL_SANDBOX=${PAYPAL_SANDBOX}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - PAYPAL_AUTH_WEBHOOK_ID=${PAYPAL_AUTH_WEBHOOK_ID}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - NODE_ENV=production
    volumes:
      - backend:/app/backend
      - /app/backend/node_modules
    networks:
      - traefik
      - medusa
    depends_on:
      - postgres
      - redis

  storefront:
    build:
      context: ./apps/storefront
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_MEDUSA_BACKEND_URL=${NEXT_PUBLIC_MEDUSA_BACKEND_URL}
        - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
        - NEXT_PUBLIC_STRIPE_KEY=${NEXT_PUBLIC_STRIPE_KEY}
        - NEXT_PUBLIC_PAYPAL_CLIENT_ID=${NEXT_PUBLIC_PAYPAL_CLIENT_ID}
        - NEXT_PUBLIC_SEARCH_ENDPOINT=${NEXT_PUBLIC_SEARCH_ENDPOINT}
        - NEXT_PUBLIC_SEARCH_API_KEY=${NEXT_PUBLIC_SEARCH_API_KEY}
        - NEXT_PUBLIC_INDEX_NAME=${NEXT_PUBLIC_INDEX_NAME}
        - REVALIDATE_SECRET=${REVALIDATE_SECRET}
    ports:
      - 8000:8000
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.storefront.rule=Host(`${STOREFRONT_DOMAIN}`)
      - traefik.http.routers.storefront.entrypoints=websecure
      - traefik.http.routers.storefront.service=storefront
      - traefik.http.routers.storefront.tls=true
      - traefik.http.services.storefront.loadbalancer.server.port=8000
    environment:
      - NEXT_PUBLIC_MEDUSA_BACKEND_URL=${NEXT_PUBLIC_MEDUSA_BACKEND_URL}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
      - NEXT_PUBLIC_STRIPE_KEY=${NEXT_PUBLIC_STRIPE_KEY}
      - NEXT_PUBLIC_PAYPAL_CLIENT_ID=${NEXT_PUBLIC_PAYPAL_CLIENT_ID}
      - NEXT_PUBLIC_SEARCH_ENDPOINT=${NEXT_PUBLIC_SEARCH_ENDPOINT}
      - NEXT_PUBLIC_SEARCH_API_KEY=${NEXT_PUBLIC_SEARCH_API_KEY}
      - NEXT_PUBLIC_INDEX_NAME=${NEXT_PUBLIC_INDEX_NAME}
      - REVALIDATE_SECRET=${REVALIDATE_SECRET}
      - NODE_ENV=production
    volumes:
      - storefront:/app/storefront
      - /app/storefront/node_modules
    networks:
      - traefik

  traefik:
    image: traefik:latest
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    command:
      # File provider
      - --providers.file.directory=/traefik
      - --providers.file.watch=true
      # Logs
      - --log.filePath=/var/log/traefik/traefik.log
      - --log.level=INFO
      # Access Logs
      - --accesslog=true
      - --accesslog.filepath=/var/log/traefik/access.log
      # API
      - --api=true
      - --api.dashboard=true
      # Docker
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=traefik
      # HTTPS redirection (80 to 443)
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
    labels:
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH_USER_PASSWORD_HASH}
      - traefik.enable=true
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/log:/var/log/traefik
      - ./traefik:/traefik
      - ./certs:/certs
    networks:
      - traefik

  minio:
    image: minio/minio:latest
    ports:
      - 9001:9001
      - 9002:9002
    restart: unless-stopped
    command: server /data --console-address :9002 --address :9001
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      # API
      - traefik.http.routers.minio.rule=Host(`${MINIO_DOMAIN}`)
      - traefik.http.routers.minio.entrypoints=websecure
      - traefik.http.routers.minio.service=minio
      - traefik.http.routers.minio.tls=true
      - traefik.http.services.minio.loadbalancer.server.port=9001
      # Console
      - traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_DOMAIN}`)
      - traefik.http.routers.minio-console.entrypoints=websecure
      - traefik.http.routers.minio-console.service=minio-console
      - traefik.http.routers.minio-console.tls=true
      - traefik.http.services.minio-console.loadbalancer.server.port=9002
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DOMAIN=${MINIO_DOMAIN}
      - MINIO_SERVER_URL=${MINIO_SERVER_URL}
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_BROWSER_REDIRECT_URL}
    volumes:
      - minio:/data
    networks:
      - traefik

  meili:
    image: getmeili/meilisearch:v1.5
    ports:
      - 7700:7700
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.meili.rule=Host(`${MEILI_DOMAIN}`)
      - traefik.http.routers.meili.entrypoints=websecure
      - traefik.http.routers.meili.service=meili
      - traefik.http.routers.meili.tls=true
      - traefik.http.services.meili.loadbalancer.server.port=7700
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MEILI_ENV=production
    volumes:
      - meili:/meili_data
    networks:
      - traefik

  postgres:
    image: postgres:13-alpine
    ports:
      - 5432:5432
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - medusa

  redis:
    image: redis:7.0-alpine
    ports:
      - 6379:6379
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - medusa

volumes:
  backend:
  storefront:
  minio:
  meili:
  postgres:
  redis:

networks:
  traefik:
    name: traefik
    external: true
  medusa:
    name: medusa
    external: true
